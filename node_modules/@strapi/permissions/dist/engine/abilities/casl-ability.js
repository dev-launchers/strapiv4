"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.caslAbilityBuilder = void 0;
const sift = __importStar(require("sift"));
const ability_1 = require("@casl/ability");
const fp_1 = require("lodash/fp");
const allowedOperations = [
    '$or',
    '$and',
    '$eq',
    '$ne',
    '$in',
    '$nin',
    '$lt',
    '$lte',
    '$gt',
    '$gte',
    '$exists',
    '$elemMatch',
];
const operations = (0, fp_1.pick)(allowedOperations, sift);
const conditionsMatcher = (conditions) => {
    return sift.createQueryTester(conditions, { operations });
};
/**
 * Casl Ability Builder.
 */
const caslAbilityBuilder = () => {
    const { can, build, ...rest } = new ability_1.AbilityBuilder(ability_1.Ability);
    return {
        can(permission) {
            const { action, subject, properties = {}, condition } = permission;
            const { fields } = properties;
            return can(action, (0, fp_1.isNil)(subject) ? 'all' : subject, fields, (0, fp_1.isObject)(condition) ? condition : undefined);
        },
        build() {
            return build({ conditionsMatcher });
        },
        ...rest,
    };
};
exports.caslAbilityBuilder = caslAbilityBuilder;
//# sourceMappingURL=casl-ability.js.map
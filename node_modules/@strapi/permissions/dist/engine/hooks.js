"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWillRegisterContext = exports.createBeforeEvaluateContext = exports.createValidateContext = exports.createEngineHooks = void 0;
const fp_1 = require("lodash/fp");
const utils_1 = require("@strapi/utils");
const domain = __importStar(require("../domain"));
/**
 * Create a hook map used by the permission Engine
 */
const createEngineHooks = () => ({
    'before-format::validate.permission': utils_1.hooks.createAsyncBailHook(),
    'format.permission': utils_1.hooks.createAsyncSeriesWaterfallHook(),
    'after-format::validate.permission': utils_1.hooks.createAsyncBailHook(),
    'before-evaluate.permission': utils_1.hooks.createAsyncSeriesHook(),
    'before-register.permission': utils_1.hooks.createAsyncSeriesHook(),
});
exports.createEngineHooks = createEngineHooks;
/**
 * Create a context from a domain {@link Permission} used by the validate hooks
 */
const createValidateContext = (permission) => ({
    get permission() {
        return (0, fp_1.cloneDeep)(permission);
    },
});
exports.createValidateContext = createValidateContext;
/**
 * Create a context from a domain {@link Permission} used by the before valuate hook
 */
const createBeforeEvaluateContext = (permission) => ({
    get permission() {
        return (0, fp_1.cloneDeep)(permission);
    },
    addCondition(condition) {
        Object.assign(permission, domain.permission.addCondition(condition, permission));
        return this;
    },
});
exports.createBeforeEvaluateContext = createBeforeEvaluateContext;
/**
 * Create a context from a casl Permission & some options
 * @param caslPermission
 */
const createWillRegisterContext = ({ permission, options }) => ({
    ...options,
    get permission() {
        return (0, fp_1.cloneDeep)(permission);
    },
    condition: {
        and(rawConditionObject) {
            if (!permission.condition) {
                permission.condition = { $and: [] };
            }
            if ((0, fp_1.isArray)(permission.condition.$and)) {
                permission.condition.$and.push(rawConditionObject);
            }
            return this;
        },
        or(rawConditionObject) {
            if (!permission.condition) {
                permission.condition = { $and: [] };
            }
            if ((0, fp_1.isArray)(permission.condition.$and)) {
                const orClause = permission.condition.$and.find((0, fp_1.has)('$or'));
                if (orClause) {
                    orClause.$or.push(rawConditionObject);
                }
                else {
                    permission.condition.$and.push({ $or: [rawConditionObject] });
                }
            }
            return this;
        },
    },
});
exports.createWillRegisterContext = createWillRegisterContext;
//# sourceMappingURL=hooks.js.map
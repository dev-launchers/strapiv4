"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAssetsStream = void 0;
const path_1 = require("path");
const https_1 = __importDefault(require("https"));
const fs_extra_1 = require("fs-extra");
const stream_1 = require("stream");
function getFileStream(filepath, isLocal = false) {
    if (isLocal) {
        return (0, fs_extra_1.createReadStream)(filepath);
    }
    const readableStream = new stream_1.PassThrough();
    https_1.default
        .get(filepath, (res) => {
        if (res.statusCode !== 200) {
            readableStream.emit('error', new Error(`Request failed with status code ${res.statusCode}`));
            return;
        }
        res.pipe(readableStream);
    })
        .on('error', (error) => {
        readableStream.emit('error', error);
    });
    return readableStream;
}
function getFileStats(filepath, isLocal = false) {
    if (isLocal) {
        return (0, fs_extra_1.stat)(filepath);
    }
    return new Promise((resolve, reject) => {
        https_1.default
            .get(filepath, (res) => {
            if (res.statusCode !== 200) {
                reject(new Error(`Request failed with status code ${res.statusCode}`));
                return;
            }
            const contentLength = res.headers['content-length'];
            const stats = {
                size: contentLength ? parseInt(contentLength, 10) : 0,
            };
            resolve(stats);
        })
            .on('error', (error) => {
            reject(error);
        });
    });
}
/**
 * Generate and consume assets streams in order to stream each file individually
 */
const createAssetsStream = (strapi) => {
    const generator = async function* () {
        const stream = strapi.db
            // Create a query builder instance (default type is 'select')
            .queryBuilder('plugin::upload.file')
            // Fetch all columns
            .select('*')
            // Get a readable stream
            .stream();
        for await (const file of stream) {
            const isLocalProvider = file.provider === 'local';
            const filepath = isLocalProvider ? (0, path_1.join)(strapi.dirs.static.public, file.url) : file.url;
            const stats = await getFileStats(filepath, isLocalProvider);
            const stream = getFileStream(filepath, isLocalProvider);
            yield {
                metadata: file,
                filepath,
                filename: file.hash + file.ext,
                stream,
                stats: { size: stats.size },
            };
            if (file.formats) {
                for (const format of Object.keys(file.formats)) {
                    const fileFormat = file.formats[format];
                    const fileFormatFilepath = isLocalProvider
                        ? (0, path_1.join)(strapi.dirs.static.public, fileFormat.url)
                        : fileFormat.url;
                    const fileFormatStats = await getFileStats(fileFormatFilepath, isLocalProvider);
                    const fileFormatStream = getFileStream(fileFormatFilepath, isLocalProvider);
                    const metadata = { ...fileFormat, type: format, mainHash: file.hash };
                    yield {
                        metadata,
                        filepath: fileFormatFilepath,
                        filename: fileFormat.hash + fileFormat.ext,
                        stream: fileFormatStream,
                        stats: { size: fileFormatStats.size },
                    };
                }
            }
        }
    };
    return stream_1.Duplex.from(generator());
};
exports.createAssetsStream = createAssetsStream;
//# sourceMappingURL=assets.js.map
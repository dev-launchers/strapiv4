"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.new = exports.abilities = void 0;
const fp_1 = __importDefault(require("lodash/fp"));
const hooks_1 = require("./hooks");
const abilities = __importStar(require("./abilities"));
exports.abilities = abilities;
/**
 * Create a default state object for the engine
 */
const createEngineState = () => {
    const hooks = (0, hooks_1.createEngineHooks)();
    return { hooks };
};
const newEngine = (params) => {
    const { providers, abilityBuilderFactory = abilities.caslAbilityBuilder } = params;
    const state = createEngineState();
    const runValidationHook = async (hook, context) => state.hooks[hook].call(context);
    /**
     * Evaluate a permission using local and registered behaviors (using hooks).
     * Validate, format (add condition, etc...), evaluate (evaluate conditions) and register a permission
     */
    const evaluate = async (params) => {
        const { options, register } = params;
        const preFormatValidation = await runValidationHook('before-format::validate.permission', (0, hooks_1.createBeforeEvaluateContext)(params.permission));
        if (preFormatValidation === false) {
            return;
        }
        const permission = (await state.hooks['format.permission'].call(params.permission));
        const afterFormatValidation = await runValidationHook('after-format::validate.permission', (0, hooks_1.createValidateContext)(permission));
        if (afterFormatValidation === false) {
            return;
        }
        await state.hooks['before-evaluate.permission'].call((0, hooks_1.createBeforeEvaluateContext)(permission));
        const { action, subject, properties, conditions = [] } = permission;
        if (conditions.length === 0) {
            return register({ action, subject, properties });
        }
        const resolveConditions = fp_1.default.map(providers.condition.get);
        const removeInvalidConditions = fp_1.default.filter((condition) => fp_1.default.isFunction(condition.handler));
        const evaluateConditions = (conditions) => {
            return Promise.all(conditions.map(async (condition) => ({
                condition,
                result: await condition.handler(fp_1.default.merge(options, { permission: fp_1.default.cloneDeep(permission) })),
            })));
        };
        const removeInvalidResults = fp_1.default.filter(({ result }) => fp_1.default.isBoolean(result) || fp_1.default.isObject(result));
        const evaluatedConditions = await Promise.resolve(conditions)
            .then(resolveConditions)
            .then(removeInvalidConditions)
            .then(evaluateConditions)
            .then(removeInvalidResults);
        const resultPropEq = fp_1.default.propEq('result');
        const pickResults = fp_1.default.map(fp_1.default.prop('result'));
        if (evaluatedConditions.every(resultPropEq(false))) {
            return;
        }
        if (fp_1.default.isEmpty(evaluatedConditions) || evaluatedConditions.some(resultPropEq(true))) {
            return register({ action, subject, properties });
        }
        const results = pickResults(evaluatedConditions).filter(fp_1.default.isObject);
        if (fp_1.default.isEmpty(results)) {
            return register({ action, subject, properties });
        }
        return register({
            action,
            subject,
            properties,
            condition: { $and: [{ $or: results }] },
        });
    };
    return {
        get hooks() {
            return state.hooks;
        },
        /**
         * Create a register function that wraps a `can` function
         * used to register a permission in the ability builder
         */
        createRegisterFunction(can, options) {
            return async (permission) => {
                const hookContext = (0, hooks_1.createWillRegisterContext)({ options, permission });
                await state.hooks['before-register.permission'].call(hookContext);
                return can(permission);
            };
        },
        /**
         * Register a new handler for a given hook
         */
        on(hook, handler) {
            const validHooks = Object.keys(state.hooks);
            const isValidHook = validHooks.includes(hook);
            if (!isValidHook) {
                throw new Error(`Invalid hook supplied when trying to register an handler to the permission engine. Got "${hook}" but expected one of ${validHooks.join(', ')}`);
            }
            state.hooks[hook].register(handler);
            return this;
        },
        /**
         * Generate an ability based on the instance's
         * ability builder and the given permissions
         */
        async generateAbility(permissions, options = {}) {
            const { can, build } = abilityBuilderFactory();
            for (const permission of permissions) {
                const register = this.createRegisterFunction(can, options);
                await evaluate({ permission, options, register });
            }
            return build();
        },
    };
};
exports.new = newEngine;
//# sourceMappingURL=index.js.map